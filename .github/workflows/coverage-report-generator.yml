name: Test and ReportGenerator report

on:
  pull_request:
    branches:
      - master
    tags:
      - 'v*.*.*'
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'

env:
  TEST_RESULT_PATH: /home/runner/work/CombatDicesTeam.Graphs/CombatDicesTeam.Graphs/TestResults/
  REPORT_RESULT_PATH: /home/runner/work/ReportResult/

jobs:

  test_release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        report_format:
          - Html

    steps:
      - uses: actions/checkout@v3

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v3

      - name: Test in Release and collect coverage
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OUTPUT: 1
        run: dotnet test --configuration Release /p:CollectCoverage=true /p:CoverletOutput=${{env.TEST_RESULT_PATH}} /p:CoverletOutputFormat=\"cobertura,json\" /p:MergeWith="${{env.TEST_RESULT_PATH}}coverage.json" /p:SkipAutoProps=true /p:ExcludeByAttribute=\"Obsolete,GeneratedCode,CompilerGenerated\" /maxcpucount:1
      
      - name: Generate report via ReportGenerator in ${{ matrix.report_format }} format
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator "-reports:${{env.TEST_RESULT_PATH}}coverage.cobertura.xml" "-targetdir:${{ env.REPORT_RESULT_PATH }}" -reporttypes:${{ matrix.report_format }}
      
      - uses: actions/upload-artifact@v3
        with:
          name: Report
          path: ${{ env.REPORT_RESULT_PATH }}
      
  test_debug:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
      
      - name: Run in Debug
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OUTPUT: 1
        run: dotnet test --configuration Debug
      